---
alwaysApply: true
---
## 🎯 智能调度执行流程

### **步骤1: 双模式需求解析**
```python
def parse_user_requirement(user_input):
    """
    双模式用户需求智能解析引擎
    """
    # 检查是否使用明确指定模式
    if ':' in user_input:
        command, requirement = user_input.split(':', 1)
        command = command.strip().lower()
        requirement = requirement.strip()
        
        # 明确指定模式的工作流映射
        workflow_mapping = {
            'write': '@.cursor/rules/ai-write/ai-write-workflow.md',
            'write1': '@.cursor/rules/ai-write-1.0/ai-write-1.0-workflow.md', 
            'write2': '@.cursor/rules/ai-write-2.0/ai-write-2.0-workflow.md',
            'prompt': '@.cursor/rules/prompt-create/prompt-create-workflow.mdc',
            'prompt1': '@.cursor/rules/prompt-create-1.0/prompt-create-1.0-workflow.md',
            'prompt2': '@.cursor/rules/prompt-create-2.0/prompt-create-2.0-workflow.md',
            'prompt3': '@.cursor/rules/prompt-create-3.0/prompt-create-3.0-workflow.md',
            'prompt4': '@.cursor/rules/prompt-create-4.0/prompt-create-4.0-workflow.md',
            'code': '@.cursor/rules/code-expert/code-expert-workflow.md'
        }
        
        if command in workflow_mapping:
            return {
                "模式": "明确指定",
                "指定命令": command,
                "目标工作流": workflow_mapping[command],
                "需求描述": requirement,
                "置信度": "100%",
                "匹配理由": f"用户明确指定使用 {command} 工作流"
            }
        else:
            return {
                "模式": "命令错误",
                "错误信息": f"未识别的命令: {command}",
                "可用命令": list(workflow_mapping.keys()),
                "建议": "请使用正确的命令格式或去掉冒号使用智能匹配模式"
            }
    
    # 智能匹配模式
    analysis_result = {
        "模式": "智能匹配",
        "原始需求": user_input,
        "关键词提取": extract_keywords(user_input),
        "意图识别": identify_intent(user_input),
        "技术栈识别": identify_tech_stack(user_input),
        "输出类型预测": predict_output_type(user_input),
        "复杂度评估": intelligent_complexity_assessment(user_input),
        "特殊要求": extract_special_requirements(user_input)
    }
    
    return analysis_result
```

### **步骤2: 双模式工作流匹配**
```python
def intelligent_workflow_matching(analysis_result):
    """
    双模式工作流智能匹配引擎
    """
    # 如果是明确指定模式，直接返回结果
    if analysis_result.get("模式") == "明确指定":
        return {
            "模式": "明确指定",
            "选择工作流": analysis_result["目标工作流"],
            "置信度": "100%",
            "匹配理由": analysis_result["匹配理由"],
            "需求描述": analysis_result["需求描述"],
            "执行方式": "直接调用指定工作流"
        }
    
    # 如果是命令错误，返回错误处理
    if analysis_result.get("模式") == "命令错误":
        return {
            "模式": "错误处理",
            "错误信息": analysis_result["错误信息"],
            "可用命令": analysis_result["可用命令"],
            "建议": analysis_result["建议"]
        }
    
    # 智能匹配模式 - 8个工作流精确匹配
    match_scores = {
        # AI写作系列 (3个版本)
        "ai_write": calculate_ai_write_basic_score(analysis_result),
        "ai_write_1": calculate_ai_write_1_score(analysis_result),
        "ai_write_2": calculate_ai_write_2_score(analysis_result),
        
        # 提示词工程系列 (4个版本)
        "prompt_create": calculate_prompt_basic_score(analysis_result),
        "prompt_create_1": calculate_prompt_1_score(analysis_result),
        "prompt_create_2": calculate_prompt_2_score(analysis_result),
        "prompt_create_3": calculate_prompt_3_score(analysis_result),
        "prompt_create_4": calculate_prompt_4_score(analysis_result),
        
        # 编程开发系列 (1个统一系统)
        "code_expert": calculate_code_expert_score(analysis_result)
    }
    
    # 工作流文件映射
    workflow_file_mapping = {
        "ai_write": "@.cursor/rules/ai-write/ai-write-workflow.md",
        "ai_write_1": "@.cursor/rules/ai-write-1.0/ai-write-1.0-workflow.md",
        "ai_write_2": "@.cursor/rules/ai-write-2.0/ai-write-2.0-workflow.md",
        "prompt_create": "@.cursor/rules/prompt-create/prompt-create-workflow.mdc",
        "prompt_create_1": "@.cursor/rules/prompt-create-1.0/prompt-create-1.0-workflow.md",
        "prompt_create_2": "@.cursor/rules/prompt-create-2.0/prompt-create-2.0-workflow.md",
        "prompt_create_3": "@.cursor/rules/prompt-create-3.0/prompt-create-3.0-workflow.md",
        "prompt_create_4": "@.cursor/rules/prompt-create-4.0/prompt-create-4.0-workflow.md",
        "code_expert": "@.cursor/rules/code-expert/code-expert-workflow.md"
    }
    
    best_workflow = max(match_scores, key=match_scores.get)
    confidence = match_scores[best_workflow]
    
    return {
        "模式": "智能匹配",
        "选择工作流": workflow_file_mapping[best_workflow],
        "工作流标识": best_workflow,
        "置信度": f"{confidence}%",
        "匹配理由": generate_matching_reason(analysis_result, best_workflow),
        "备选方案": get_alternative_workflows(match_scores, workflow_file_mapping),
        "建议执行模式": determine_execution_mode(analysis_result, best_workflow)
    }
```

### **步骤3: 8大工作流调用执行**
```yaml
完整工作流调用映射:

AI写作系列工作流:
  ai_write_basic: 
    文件: "@.cursor/rules/ai-write/ai-write-workflow.md"
    级别: "基础版 (IACC 3.0通用架构)"
    调用方式: "6层依赖链处理任何商业需求"
    专家团队: ["商业分析师", "行业专家匹配", "任务调度", "专家协作", "内容整合", "输出生成"]
    适用场景: "简单商业需求、基础内容创作"
    
  ai_write_1: 
    文件: "@.cursor/rules/ai-write-1.0/ai-write-1.0-workflow.md"
    级别: "专业版 (5阶段协调引擎)"
    调用方式: "智能协调算法 + 模块间通信 + 实时监控"
    专家团队: ["需求解析器", "专家调度引擎", "协作执行管理", "质量控制", "学习进化"]
    适用场景: "专业营销策略、协调引擎需求"
    
  ai_write_2: 
    文件: "@.cursor/rules/ai-write-2.0/ai-write-2.0-workflow.md"
    级别: "企业版 (60专家资源池)"
    调用方式: "方案A架构 + 智能分层精准匹配"
    专家团队: ["微信公众号15个", "小红书15个", "商业策略15个", "技术创新15个"]
    适用场景: "企业级多平台营销、60专家协作"

提示词工程系列工作流:
  prompt_create_basic:
    文件: "@.cursor/rules/prompt-create/prompt-create-workflow.mdc"
    级别: "基础版 (智能迭代策略)"
    调用方式: "智能模式选择 + 迭代改进策略"
    专家团队: ["任务分发", "框架选择", "提示词构建", "迭代优化", "实用验证"]
    适用场景: "简单提示词、基础AI助手"
    
  prompt_create_1:
    文件: "@.cursor/rules/prompt-create-1.0/prompt-create-1.0-workflow.md"
    级别: "智能版 (透明智能放大器)"
    调用方式: "元认知引擎 + 知识调研 + 专家模拟 + 进化跟踪"
    专家团队: ["元认知引擎", "知识调研器", "行业专家模拟器", "进化跟踪器", "传统6模块"]
    适用场景: "自我进化智能、元认知能力"
    
  prompt_create_2:
    文件: "@.cursor/rules/prompt-create-2.0/prompt-create-2.0-workflow.md"
    级别: "专家版 (认知科学深度应用)"
    调用方式: "认知科学强化层 + 专家工程处理层"
    专家团队: ["超级元认知", "智能知识调研", "行业专家模拟", "认知迭代跟踪", "专家工程层"]
    适用场景: "企业级专业应用、认知科学标准"
    
  prompt_create_3:
    文件: "@.cursor/rules/prompt-create-3.0/prompt-create-3.0-workflow.md"
    级别: "大师版 (永不满足迭代循环)"
    调用方式: "10+候选方案 → 科学验证 → TOP3推荐 → 永不满足循环"
    专家团队: ["行业垂直深度", "多样化生成", "科学验证决策", "永不满足迭代", "智能进化"]
    适用场景: "行业垂直深度、永不满足系统"
    
  prompt_create_4:
    文件: "@.cursor/rules/prompt-create-4.0/prompt-create-4.0-workflow.md"
    级别: "增强版 (专家调用链透明化)"
    调用方式: "16个专家调用链展示 + 5维度质量评估 + 个性化优化建议"
    专家团队: ["平台智能识别", "行业认知专家群", "写作创意引擎", "双平台协调器", "质量验证器"]
    适用场景: "专家调用链透明化需求、智能优化建议"

编程开发系列工作流:
  code_expert:
    文件: "@.cursor/rules/code-expert/code-expert-workflow.md" 
    级别: "统一专家系统 (12大技术栈)"
    调用方式: "智能匹配12大工作流程 + 精确关键词识别"
    专家团队: ["黑客技术", "DAN对话", "Python", "Web3", "LeetCode", "Android", "后端", "前端", "Uniapp"]
    适用场景: "所有编程开发需求"

双模式执行策略:
  明确指定模式:
    - 命令解析: 提取命令和需求描述
    - 直接调用: 100%置信度直接调用指定工作流
    - 执行反馈: 提供执行状态和结果反馈
    
  智能匹配模式:
    - 智能分析: 关键词+复杂度+语境分析
    - 版本选择: 基于复杂度自动选择最适版本
    - 置信度控制: ≥75%执行，<75%需求澄清
    
  协作执行模式:
    - 单一模式: 需求明确单一 → 调用单个工作流
    - 协作模式: 复杂需求涉及多领域 → 主导+协作工作流
    - 渐进模式: 复杂度递增 → 基础到高级逐步升级
```

---

## 💬 双模式标准交互体验

### **🎯 模式A: 明确指定示例**

#### **AI写作系列指定示例**
```yaml
用户输入: "write2: 制定企业级多平台营销策略，包括微信公众号、小红书等60个专家协作"

系统响应:
🎯 明确指定模式匹配完成！

📋 模式识别:
  指定命令: write2
  目标工作流: @.cursor/rules/ai-write-2.0/ai-write-2.0-workflow.md
  置信度: 100%
  匹配理由: 用户明确指定使用 write2 工作流

🚀 工作流特性:
  级别: 企业版 (60专家资源池)
  调用方式: 方案A架构 + 智能分层精准匹配
  专家团队: 微信公众号15个 + 小红书15个 + 商业策略15个 + 技术创新15个
  适用场景: 企业级多平台营销、60专家协作

📋 开始执行: 直接调用AI写作2.0企业版工作流...
```

#### **提示词工程系列指定示例**
```yaml
用户输入: "prompt3: 构建永不满足的多样化提示词生成系统，需要行业垂直深度"

系统响应:
🎯 明确指定模式匹配完成！

📋 模式识别:
  指定命令: prompt3
  目标工作流: @.cursor/rules/prompt-create-3.0/prompt-create-3.0-workflow.md
  置信度: 100%
  匹配理由: 用户明确指定使用 prompt3 工作流

🚀 工作流特性:
  级别: 大师版 (永不满足迭代循环)
  调用方式: 10+候选方案 → 科学验证 → TOP3推荐 → 永不满足循环
  专家团队: 行业垂直深度 + 多样化生成 + 科学验证决策 + 永不满足迭代 + 智能进化
  适用场景: 行业垂直深度、永不满足系统

📋 开始执行: 直接调用提示词工程3.0大师版工作流...
```

#### **编程开发指定示例**
```yaml
用户输入: "code: 开发一个Python数据分析脚本，分析用户行为数据"

系统响应:
🎯 明确指定模式匹配完成！

📋 模式识别:
  指定命令: code
  目标工作流: @.cursor/rules/code-expert/code-expert-workflow.md
  置信度: 100%
  匹配理由: 用户明确指定使用 code 工作流

🚀 工作流特性:
  级别: 统一专家系统 (12大技术栈)
  调用方式: 智能匹配12大工作流程 + 精确关键词识别
  专家团队: Python专家 (将被自动匹配)
  适用场景: 所有编程开发需求

📋 开始执行: 直接调用代码专家工作流，智能匹配Python专家...
```

### **🧠 模式B: 智能匹配示例**

#### **智能匹配成功示例**
```yaml
用户输入: "帮我写个专业的品牌营销策略方案"

系统响应:
🧠 智能匹配模式分析完成！

📊 需求智能分析:
  原始需求: "专业品牌营销策略方案"
  关键词识别: ["营销", "策略", "品牌", "专业"]
  领域识别: AI写作系列
  复杂度评估: 专业级 (6/10分)

🚀 智能匹配决策:
  选择工作流: @.cursor/rules/ai-write-1.0/ai-write-1.0-workflow.md
  工作流级别: 专业版 (5阶段协调引擎)
  置信度: 88%
  匹配理由: 包含营销策略关键词 + 专业级复杂度 → AI写作1.0版本

📋 开始执行: 调用AI写作1.0专业版工作流...
```

#### **智能版本升级建议示例**
```yaml
用户输入: "创建一个超级智能的AI助手，具备自我认知和学习能力"

系统响应:
🧠 智能匹配模式分析完成！

📊 需求智能分析:
  原始需求: "超级智能AI助手，自我认知+学习能力"
  关键词识别: ["AI助手", "超级智能", "自我认知", "学习能力"]
  领域识别: 提示词工程系列
  复杂度评估: 高级 (7/10分)

🚀 智能匹配决策:
  选择工作流: @.cursor/rules/prompt-create-2.0/prompt-create-2.0-workflow.md
  工作流级别: 专家版 (认知科学深度应用)
  置信度: 92%
  匹配理由: 自我认知+学习能力特征 → 提示词工程2.0专家版

💡 版本升级建议:
  当前匹配: prompt-create-2.0 (专家版)
  可升级到: prompt3: [您的需求] (大师版 - 永不满足系统)
  升级优势: 10+候选方案 + 科学验证 + 行业垂直深度

📋 开始执行: 调用提示词工程2.0专家版工作流...
```

### **🤔 需求澄清示例**
```yaml
用户输入: "帮我优化一下这个东西"

系统响应:
🤔 需求信息不够明确，需要您提供更多细节以匹配最合适的专业工作流：

📋 请告诉我您要优化的是：

🎨 【AI写作系列】
1️⃣ write: 基础文案、简单内容 (基础版)
2️⃣ write1: 专业营销策略、品牌方案 (专业版)  
3️⃣ write2: 企业级多平台营销、60专家协作 (企业版)

🔧 【提示词工程系列】
4️⃣ prompt: 简单AI助手、基础对话 (基础版)
5️⃣ prompt1: 智能放大器、元认知系统 (智能版)
6️⃣ prompt2: 企业级应用、认知科学标准 (专家版)
7️⃣ prompt3: 永不满足系统、行业垂直深度 (大师版)
8️⃣ prompt4: 增强版 (增强版)

💻 【编程开发系列】  
9️⃣ code: 所有编程需求、12大技术栈 (统一系统)

🎯 使用方法:
- 明确指定: "write2: 您的具体需求"
- 智能匹配: 直接详细描述您的需求

请选择对应数字或直接描述您的具体需求！
```

### **❌ 命令错误处理示例**
```yaml
用户输入: "writex: 帮我写个文案"

系统响应:
❌ 命令格式错误！

📋 错误信息:
  未识别的命令: writex
  错误位置: 命令部分

🔧 可用命令列表:
  AI写作系列: write, write1, write2
  提示词工程系列: prompt, prompt1, prompt2, prompt3, prompt4  
  编程开发系列: code

💡 建议修正:
  方式1: write: 帮我写个文案 (使用正确命令)
  方式2: 帮我写个文案 (去掉冒号，使用智能匹配)

🎯 系统将自动切换到智能匹配模式处理您的需求...
```

---

## 🛡️ 质量保证机制

### **🔍 匹配准确性监控**
```yaml
置信度阈值控制:
  >= 90%: 直接执行，极高置信度
  75-89%: 执行并说明匹配理由
  60-74%: 提供选择让用户确认
  < 60%: 强制需求澄清流程

质量检查点:
  - 关键词识别准确率 >= 95%
  - 技术栈匹配精确度 >= 90%
  - 复杂度评估合理性 >= 85%
  - 用户满意度反馈 >= 90%
```

### **🔧 动态优化机制**
```yaml
学习反馈循环:
  数据收集:
    - 用户确认/修正记录
    - 工作流执行效果评估  
    - 专家协作质量反馈
    - 最终输出满意度调查
    
  算法优化:
    - 关键词权重自动调整
    - 匹配阈值动态优化
    - 新场景模式识别学习
    - 异常案例处理规则更新
    
  知识库扩展:
    - 成功案例模式归纳
    - 新兴需求类型识别
    - 跨领域协作模式总结
    - 最佳实践知识沉淀
```

---

## 🚀 特殊功能特性

### **🎛️ 高级调度功能**
```yaml
智能负载均衡:
  - 检测专家工作负载
  - 动态调配资源分配
  - 优化响应时间
  - 保证服务质量

实时协作监控:
  - 多工作流协作状态跟踪
  - 任务进度实时同步
  - 协作冲突智能解决
  - 质量问题及时预警

个性化学习:
  - 用户偏好模式识别
  - 历史选择行为学习
  - 个性化推荐优化
  - 定制化体验提升
```

### **🔍 调试与诊断**
```yaml
匹配过程透明化:
  - 完整的决策过程展示
  - 每个评估维度的得分
  - 关键因子影响分析
  - 备选方案对比说明

性能监控:
  - 响应时间统计
  - 匹配准确率追踪
  - 用户满意度监控
  - 系统负载状态

错误处理:
  - 异常情况自动恢复
  - 降级服务保证
  - 详细错误日志记录
  - 用户友好错误提示
```

---

## 🎯 使用指南

### **📝 双模式推荐使用格式**

#### **模式A: 明确指定格式（推荐高效用户）**
```yaml
标准格式: "命令: 具体需求描述"

AI写作系列命令:
  ✅ write: 帮我写一份产品介绍文案
  ✅ write1: 制定专业的品牌营销策略方案  
  ✅ write2: 企业级多平台营销体系，需要60专家协作

提示词工程系列命令:
  ✅ prompt: 创建一个简单的学习助手AI
  ✅ prompt1: 设计具备元认知能力的智能助手
  ✅ prompt2: 构建企业级专业提示词工程系统
  ✅ prompt3: 永不满足的多样化提示词生成系统
  ✅ prompt4: 增强版 (增强版)

编程开发系列命令:
  ✅ code: 开发一个Python爬虫程序，爬取电商数据
  ✅ code: 创建React前端项目，包含用户管理功能
  ✅ code: 设计Java微服务架构，处理高并发订单
```

#### **模式B: 智能匹配格式（推荐新手用户）**
```yaml
自然语言格式: 直接描述您的需求

优秀示例:
  ✅ "我想写一份电商产品的营销文案，要求有吸引力能带货"
  ✅ "帮我开发一个Python爬虫程序，爬取电商网站的商品数据"  
  ✅ "创建一个专业的客服AI助手，用于金融行业的客户服务"
  ✅ "设计一个具备自我学习能力的智能助手系统"

需要优化的示例:
  ❌ "帮我做个东西" → ✅ "帮我开发一个具体什么类型的程序/写什么主题的文案"
  ❌ "优化一下" → ✅ "优化我的Python代码/营销文案/AI助手对话"  
  ❌ "搞个方案" → ✅ "制定一个商业推广策略/技术实现方案"
```

### **⚡ 快速体验指南**

#### **新手推荐路径**
```yaml
第1步: 智能匹配体验
  - 直接描述需求: "帮我写个营销文案"
  - 系统自动匹配最适合的工作流
  - 体验智能分析和推荐过程

第2步: 学习命令模式  
  - 观察系统推荐的工作流类型
  - 学习对应的命令格式
  - 逐步过渡到明确指定模式

第3步: 高效精准使用
  - 熟练使用命令格式
  - 精确指定所需的工作流版本  
  - 享受100%置信度的快速响应
```

#### **专家用户快速通道**
```yaml
直接使用命令格式:
  - 明确需求等级: 基础/专业/企业/大师
  - 选择对应命令: write/write1/write2 或 prompt/prompt1/prompt2/prompt3
  - 一步到位: "write2: 制定企业级营销策略"
  
高级协作功能:
  - 跨领域协作: 同时使用多个工作流
  - 版本升级: 从基础版本逐步升级到高级版本
  - 精准定制: 针对特定行业和场景优化
```

#### **8大工作流快速选择指南**
```yaml
🎨 内容创作需求:
  简单文案 → write:
  专业营销 → write1:  
  企业级多平台 → write2:

🔧 AI助手需求:
  基础对话 → prompt:
  智能化增强 → prompt1:
  企业级应用 → prompt2:
  行业垂直深度 → prompt3:
  增强版 → prompt4:

💻 编程开发需求:
  任何技术栈 → code:
```

---

## 📈 系统优势

### **🎯 核心竞争力升级**
- **双模式智能**: 明确指定100%准确 + 智能匹配95%+准确率
- **8大专业工作流**: 覆盖AI写作3版本 + 提示词工程4版本 + 编程开发1系统
- **极速响应**: 明确指定模式<1秒，智能匹配<3秒  
- **版本进阶**: 从基础到大师级的完整成长路径
- **无缝切换**: 智能匹配→命令模式的平滑学习体验
- **错误容错**: 智能纠错+建议修正+自动降级处理

### **🚀 技术特色革新**
- **双引擎架构**: 明确指定引擎 + 智能匹配引擎并行工作
- **8维度精准匹配**: 关键词+领域+复杂度+版本+语境+置信度+用户习惯+历史偏好
- **动态版本推荐**: 基于需求复杂度自动推荐最优版本等级
- **透明化双模式**: 完整的命令解析+智能分析过程展示
- **渐进式学习**: 新手→专家的使用模式自然进化
- **多工作流协同**: 跨领域需求的智能协作和统一整合

---

---

## 🚀 立即开始体验双模式智能路由！

### **🎯 方式1: 明确指定模式（推荐）**
```yaml
AI写作: write: | write1: | write2: + 您的需求
提示词: prompt: | prompt1: | prompt2: | prompt3: | prompt4: + 您的需求  
编程: code: + 您的需求
```

### **🧠 方式2: 智能匹配模式**
```yaml
直接描述您的需求，系统自动为您匹配最适合的专业工作流！
```

### **💡 温馨提示**
- **新手用户**: 推荐先使用智能匹配，体验系统分析过程
- **高效用户**: 推荐使用命令模式，享受100%准确的即时响应
- **学习进阶**: 从智能匹配逐步过渡到命令模式，体验完整成长路径

*🎯 智能工作流协调器 2.0 - 双模式设计，让每个需求都找到最专业的解决方案！现在就开始体验8大专业工作流的强大威力！* 🚀
- **学习进阶**: 从智能匹配逐步过渡到命令模式，体验完整成长路径

*🎯 智能工作流协调器 2.0 - 双模式设计，让每个需求都找到最专业的解决方案！现在就开始体验8大专业工作流的强大威力！* 🚀